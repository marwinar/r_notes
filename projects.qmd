# Keeping a project tidy

One of my pet peeves is that statistics and data analysis is just a tool, not a goal in itself. Another pet peeve is that development / analysis / writing is not a linear process but follows a creative and chaotic path. Therefore it is not just wise, but absolutely necessary to think about the process, and to keep things neat and in order. What that means for me, personally:

1.  Using version control
2.  Following good programming practices (naming conventions, indentation, creating reusable code)
3.  Using notebooks, markdown, or another document form (such as this Quarto book) to keep thoughts and analysis together.
4.  Trying to keep a bit of structure in sources and resources

## Version control

My toolkit with regards to version control is pretty simple. I use git with a local repo on my computer and a remote on github. For a simple one-person project I don't feel the need to work with branches, but for anything that grows in complexity I use (part of) git flow: master, develop, feature branches and hotfixes (and if necessary releases as well).

Git works pretty well straight from RStudio, but SourceTree has nicer visuals and more features. And then there is of course also the command-line git bash. Rules of thumb: commit early, commit often, and don't be afraid to refactor and clean up.

## Programming practices

Style guides:

-   [Tidyverse Style Guide](https://style.tidyverse.org/index.html)

-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.html) (based on the tidyverse guide but with CamelCase for functions and explicit returns)

-   [JEFworks R Style Guide](https://jef.works/R-style-guide/)

I don't follow a particular style guide to the letter, and I am just very bad at following my own rules. I admit: even after many years of programming I still name my variables `temp` every once in a while...). My basic rules of thumb with regards to naming are: informative names, snake_case, verbs for functions (e.g. "shake_paw"). Snake case is also recommended by [@Wickham.etal2023].

With regards to pipes, I have always used the classic magrittr pipe %\>%, but am going to change my habits to \|\> after reading [this argument](https://r4ds.hadley.nz/data-transform#sec-the-pipe).

## Rmd, quarto, etc

My first experiences with R go back to 2002 I think. At the time we just used the plain R console, and that already felt very impressive. Later came ESS (emacs speaks statistics), and that made things much easier even though I always kept mixing up the keyboard shortcuts. Code documentation was in comments. And then some years later Sweave came :). Finally it was possible to keep thoughts and code and results in one place and distribute it as a single document. I really, REALLY liked that at the time.

When after a long break away from R I rediscovered R again, I found RMarkdown (rmd). It still had all the good things Sweave already provided, but was much easier and had a better workflow. I made a sidestep to Jupyter when I toyed around with Python, but Rmd was my favorite tool of choice. Only recently I switched to Quarto, just another tool in the long list of tools, nothing really shocking, but newer, neater and better :). The point I want to make is that the tool in itself doesn't matter (tools come and go...); it's all about finding something that works to keep thoughts flowing and tell a story.

### Quarto

Use [Cross references in Quarto](https://quarto.org/docs/authoring/cross-references.html) to create links to sections, figures, tables, formulas etcetera.

## Structuring resources; or 'where did I read that again?'

I still struggle with this one -- there are some things I just keep googling every time I need them, and there have been so many occasions where I knew I had read something before but couldn't find it again. Plain old paper books were easier -- I felt it was easier to remember which book and which chapter had a certain piece of information.

I guess this current project is my attempt to get a bit of structure in the chaos? Time will tell if it works...

## RStudio random tips and tricks

For a list of keyboard shortcuts, press Alt-Shift-K.

## Resources

[Quarto documentation](https://quarto.org/docs/guide/)
